K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
rnorm(1)
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
rnorm(1)>=0
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
#geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
#geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
# Playing with ELO ratings
# Initiate same values
Ra <- 1300
Rb <- 1000
# Formulas
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
# Maximum possible adjustment per game
K = 32
# Let's play X games
Games = 100
Elo_Rating = 1
match <- matrix(ncol=Elo_Rating, nrow=Games)
MRa <- matrix(ncol=Elo_Rating, nrow=Games)
MRb <- matrix(ncol=Elo_Rating, nrow=Games)
for (i in 1:Games ){
# Player's skills is a random normal distributed variable
if (rnorm(1)>=0){
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra + K * (Ra - (Ra- Ea))
Rb <- Rb - K * (Rb - (Rb- Eb))
}else{
Ea = 1/(1+10^((Rb-Ra)/400))
Eb = 1/(1+10^((Ra-Rb)/400))
Ra <- Ra - K * (Ra - (Ra- Ea))
Rb <- Rb + K * (Rb - (Rb- Eb))
}
# print(Ra)
# print(Rb)
match[i,] <- i
MRa[i,] <- Ra
MRb[i,] <- Rb
}
df <- data.frame(match, MRa, MRb)
colnames(df) <- c("Game", "Rating_A", "Rating_B")
# Calculate Regression Line Equation and R^2
# plot the data as lines
library("ggplot2")
ggplot(df,  aes(x = Game)) +
geom_line(aes(y = Rating_A, colour = "Rating_A", size = 1)) +
#geom_line(aes(y = Rating_B, colour = "Rating_B", size = 1)) +
theme(legend.position = "none") +
labs(x = "Games", y = "Elo rating") +
#  ylim(1000, 1800) +
theme(axis.title.y = element_text(size = rel(1.8), angle = 90)) +
theme(axis.title.x = element_text(size = rel(1.8), angle = 00))
#geom_text(x = 100, y = 1200, label = cor(df$Rating_A, df$Rating_B), parse = TRUE, size = 6 )
# mod <- lm(df$Rating_A ~ df$Rating_B)
# attributes(mod)
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
setwd("~/Desktop/data")
setwd("~/Desktop/data")
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
weedprices01012014.csv(HighQ)
weedprices01012014.csv[HighQ]
weedprices01012014.csv[HighQ,]
weedprices01012014.csv[2,]
weedprices01012014.csv[,2]
View(weedprices01012014.csv)
View(weedprices01012014.csv)
class(weedprices01012014.csv)
weedprices01012014.csv[,2] - weedprices01012014.csv[,3]
weedprices01012014.csv[,2] / weedprices01012014.csv[,3]
class(weedprices01012014.csv[,2])
as.numeric(weedprices01012014.csv[,3])
as.numeric(weedprices01012014.csv[,2])
View(weedprices01012014.csv)
View(weedprices01012014.csv)
View(weedprices31122014.csv)
stop("x")
temp
setwd("~/Desktop/data")
temp = list.files(pattern="*.csv")
temp
file = temp[1]
file
df = read.table(file, header=T, stringsAsFactors=F)
head(df)
df = read.csv2(file, header=T, stringsAsFactors=F)
head(df)
dim(df)
df = read.csv2(file, header=T, stringsAsFactors=F, quote=T)
df = read.csv(file, header=T, stringsAsFactors=F)
head)df
head(df)
gsub(".csv|weedprices", "", file)
?as.Date
?Date
?as.Date
?format
date2 = as.Date(date, "%d%m%y")
date
mydate = gsub(".csv|weedprices", "", file)
date2 = as.Date(mydate, "%d%m%y")
date2
mydate
as.Date(mydate, "%D%M%Y")
mydate = gsub(".csv|weedprices", "", file)
mydate2 = as.Date(mydate, "%d%m%Y")
mydate2
class(mydate2)
setwd("~/Desktop/data")
temp = list.files(pattern="*.csv")
dat = lapply(temp, function(file){
writeLines(file)
df = read.csv(file, header=T, stringsAsFactors=F)
mydate = gsub(".csv|weedprices", "", file)
mydate2 = as.Date(mydate, "%d%m%Y")
df$date = mydate2
return(df)
})
stop("x")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
as.numeric(weedprices01012014.csv[,2])
as.numeric(weedprices01012014.csv[,3])
test <- weedprices01012014.csv[,2] / weedprices01012014.csv[,3]
source('~/Desktop/data/price-of-weed.R', echo=TRUE)
file = "weedprices19062015.csv"
df = read.csv(file, header=T, stringsAsFactors=F)
head)df
head(df)
source('~/Desktop/data/price-of-weed.R', echo=TRUE)
head(dat[[1]])
head(dat[[2]])
head(dat[[4]])
head(dat[[5]])
head(dat[[9]])
head(dat[[10]])
setwd("~/Desktop/data")
temp = list.files(pattern="*.csv")
dat = lapply(temp, function(file){
writeLines(file)
df = read.csv(file, header=T, stringsAsFactors=F)
if(nrow(df) == 0) return(NULL)
mydate = gsub(".csv|weedprices", "", file)
mydate2 = as.Date(mydate, "%d%m%Y")
df$date = mydate2
return(df)
})
# for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
#
# as.numeric(weedprices01012014.csv[,2])
# as.numeric(weedprices01012014.csv[,3])
#  test <- weedprices01012014.csv[,2] / weedprices01012014.csv[,3]
all_dat = do.call(rbind, dat)
head(all_dat)
dim(all_dat)
str(all_dat)
source('~/Desktop/data/price-of-weed.R', echo=TRUE)
warnings()
str(all_dat)
source('~/Desktop/data/price-of-weed.R', echo=TRUE)
str(all_dat)
